var namespacecrossbow =
[
    [ "impl", "namespacecrossbow_1_1impl.html", "namespacecrossbow_1_1impl" ],
    [ "infinio", "namespacecrossbow_1_1infinio.html", "namespacecrossbow_1_1infinio" ],
    [ "logger", "namespacecrossbow_1_1logger.html", "namespacecrossbow_1_1logger" ],
    [ "program_options", "namespacecrossbow_1_1program__options.html", "namespacecrossbow_1_1program__options" ],
    [ "allocator", "classcrossbow_1_1allocator.html", "classcrossbow_1_1allocator" ],
    [ "basic_string", "classcrossbow_1_1basic__string.html", "classcrossbow_1_1basic__string" ],
    [ "buffer_reader", "classcrossbow_1_1buffer__reader.html", "classcrossbow_1_1buffer__reader" ],
    [ "buffer_writer", "classcrossbow_1_1buffer__writer.html", "classcrossbow_1_1buffer__writer" ],
    [ "ChunkAllocator", "classcrossbow_1_1_chunk_allocator.html", "classcrossbow_1_1_chunk_allocator" ],
    [ "ChunkMemoryPool", "classcrossbow_1_1_chunk_memory_pool.html", "classcrossbow_1_1_chunk_memory_pool" ],
    [ "ChunkObject", "classcrossbow_1_1_chunk_object.html", "classcrossbow_1_1_chunk_object" ],
    [ "concurrent_map", "classcrossbow_1_1concurrent__map.html", "classcrossbow_1_1concurrent__map" ],
    [ "create_static", "structcrossbow_1_1create__static.html", "structcrossbow_1_1create__static" ],
    [ "create_using", "structcrossbow_1_1create__using.html", null ],
    [ "create_using_malloc", "structcrossbow_1_1create__using__malloc.html", null ],
    [ "create_using_new", "structcrossbow_1_1create__using__new.html", null ],
    [ "default_lifetime", "structcrossbow_1_1default__lifetime.html", null ],
    [ "deserialize_policy", "structcrossbow_1_1deserialize__policy.html", "structcrossbow_1_1deserialize__policy" ],
    [ "deserialize_policy< Archiver, bool >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01bool_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01bool_01_4" ],
    [ "deserialize_policy< Archiver, boost::optional< T > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4" ],
    [ "deserialize_policy< Archiver, crossbow::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_367661013d93ffe092ed29a5faf86f65.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_367661013d93ffe092ed29a5faf86f65" ],
    [ "deserialize_policy< Archiver, std::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4" ],
    [ "deserialize_policy< Archiver, std::map< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_p12089c3fab328863e836bc6117729e40.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_p12089c3fab328863e836bc6117729e40" ],
    [ "deserialize_policy< Archiver, std::multimap< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00b40c66dad8bae8aa4295ab72893d04df.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00b40c66dad8bae8aa4295ab72893d04df" ],
    [ "deserialize_policy< Archiver, std::pair< U, V > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4" ],
    [ "deserialize_policy< Archiver, std::tuple< T... > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4" ],
    [ "deserialize_policy< Archiver, std::unordered_map< Key, Value, Hash, Predicate, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_va33c1c2e5af762bcc772f6d4ce8735212.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_va33c1c2e5af762bcc772f6d4ce8735212" ],
    [ "deserialize_policy< Archiver, std::vector< T, Allocator > >", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1deserialize__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4" ],
    [ "deserialize_policy_tuple_impl", "structcrossbow_1_1deserialize__policy__tuple__impl.html", "structcrossbow_1_1deserialize__policy__tuple__impl" ],
    [ "deserialize_policy_tuple_impl< Archiver, Tuple,-1 >", "structcrossbow_1_1deserialize__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4.html", "structcrossbow_1_1deserialize__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4" ],
    [ "deserializer", "structcrossbow_1_1deserializer.html", "structcrossbow_1_1deserializer" ],
    [ "dummy", "structcrossbow_1_1dummy.html", "structcrossbow_1_1dummy" ],
    [ "fixed_size_stack", "classcrossbow_1_1fixed__size__stack.html", "classcrossbow_1_1fixed__size__stack" ],
    [ "has_visit", "structcrossbow_1_1has__visit.html", "structcrossbow_1_1has__visit" ],
    [ "has_visit_helper", "structcrossbow_1_1has__visit__helper.html", "structcrossbow_1_1has__visit__helper" ],
    [ "infinite_lifetime", "structcrossbow_1_1infinite__lifetime.html", null ],
    [ "lifetime_traits", "structcrossbow_1_1lifetime__traits.html", null ],
    [ "lifetime_traits< default_lifetime< T > >", "structcrossbow_1_1lifetime__traits_3_01default__lifetime_3_01_t_01_4_01_4.html", null ],
    [ "lifetime_traits< infinite_lifetime< T > >", "structcrossbow_1_1lifetime__traits_3_01infinite__lifetime_3_01_t_01_4_01_4.html", null ],
    [ "no_locking", "structcrossbow_1_1no__locking.html", "structcrossbow_1_1no__locking" ],
    [ "non_copyable", "classcrossbow_1_1non__copyable.html", "classcrossbow_1_1non__copyable" ],
    [ "non_movable", "classcrossbow_1_1non__movable.html", "classcrossbow_1_1non__movable" ],
    [ "phoenix_lifetime", "structcrossbow_1_1phoenix__lifetime.html", null ],
    [ "serializable", "structcrossbow_1_1serializable.html", "structcrossbow_1_1serializable" ],
    [ "serialize_policy", "structcrossbow_1_1serialize__policy.html", "structcrossbow_1_1serialize__policy" ],
    [ "serialize_policy< Archiver, bool >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01bool_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01bool_01_4" ],
    [ "serialize_policy< Archiver, boost::optional< T > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4" ],
    [ "serialize_policy< Archiver, crossbow::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_01787815800393746394ca1e50f200bedd.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_01787815800393746394ca1e50f200bedd" ],
    [ "serialize_policy< Archiver, std::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4" ],
    [ "serialize_policy< Archiver, std::map< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_prefe0a7a2332d46b14c6c73d0cd227d1ac.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_prefe0a7a2332d46b14c6c73d0cd227d1ac" ],
    [ "serialize_policy< Archiver, std::multimap< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00_0cab77ede05bd044b8537a2c83c44859a.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00_0cab77ede05bd044b8537a2c83c44859a" ],
    [ "serialize_policy< Archiver, std::pair< U, V > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4" ],
    [ "serialize_policy< Archiver, std::tuple< T... > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4" ],
    [ "serialize_policy< Archiver, std::unordered_map< Key, Value, Hash, Predicate, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_valu5ea51ea253bcc7822df628e8d1e04713.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_valu5ea51ea253bcc7822df628e8d1e04713" ],
    [ "serialize_policy< Archiver, std::vector< T, Allocator > >", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1serialize__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4" ],
    [ "serialize_policy_tuple_impl", "structcrossbow_1_1serialize__policy__tuple__impl.html", "structcrossbow_1_1serialize__policy__tuple__impl" ],
    [ "serialize_policy_tuple_impl< Archiver, Tuple,-1 >", "structcrossbow_1_1serialize__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4.html", "structcrossbow_1_1serialize__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4" ],
    [ "serializer", "structcrossbow_1_1serializer.html", "structcrossbow_1_1serializer" ],
    [ "serializer_into_array", "structcrossbow_1_1serializer__into__array.html", "structcrossbow_1_1serializer__into__array" ],
    [ "SingleConsumerQueue", "classcrossbow_1_1_single_consumer_queue.html", "classcrossbow_1_1_single_consumer_queue" ],
    [ "singleton", "classcrossbow_1_1singleton.html", "classcrossbow_1_1singleton" ],
    [ "size_policy", "structcrossbow_1_1size__policy.html", "structcrossbow_1_1size__policy" ],
    [ "size_policy< Archiver, bool >", "structcrossbow_1_1size__policy_3_01_archiver_00_01bool_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01bool_01_4" ],
    [ "size_policy< Archiver, boost::optional< T > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01boost_1_1optional_3_01_t_01_4_01_4" ],
    [ "size_policy< Archiver, crossbow::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01crossbow_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4" ],
    [ "size_policy< Archiver, std::basic_string< Char, Traits, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1basic__string_3_01_char_00_01_traits_00_01_allocator_01_4_01_4" ],
    [ "size_policy< Archiver, std::map< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_predicate_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1map_3_01_key_00_01_value_00_01_predicate_00_01_allocator_01_4_01_4" ],
    [ "size_policy< Archiver, std::multimap< Key, Value, Predicate, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00_01_predcacc846b11af875dd5b8f45452b0b90.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1multimap_3_01_key_00_01_value_00_01_predcacc846b11af875dd5b8f45452b0b90" ],
    [ "size_policy< Archiver, std::pair< U, V > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1pair_3_01_u_00_01_v_01_4_01_4" ],
    [ "size_policy< Archiver, std::tuple< T... > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1tuple_3_01_t_8_8_8_01_4_01_4" ],
    [ "size_policy< Archiver, std::unordered_map< Key, Value, Hash, Predicate, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_value_00_24255cc159f0c25d71be6931ba8319ef.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1unordered__map_3_01_key_00_01_value_00_24255cc159f0c25d71be6931ba8319ef" ],
    [ "size_policy< Archiver, std::vector< T, Allocator > >", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4.html", "structcrossbow_1_1size__policy_3_01_archiver_00_01std_1_1vector_3_01_t_00_01_allocator_01_4_01_4" ],
    [ "size_policy_tuple_impl", "structcrossbow_1_1size__policy__tuple__impl.html", "structcrossbow_1_1size__policy__tuple__impl" ],
    [ "size_policy_tuple_impl< Archiver, Tuple,-1 >", "structcrossbow_1_1size__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4.html", "structcrossbow_1_1size__policy__tuple__impl_3_01_archiver_00_01_tuple_00-1_01_4" ],
    [ "sizer", "structcrossbow_1_1sizer.html", "structcrossbow_1_1sizer" ]
];